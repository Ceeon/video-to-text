# Git Commit Rules

## Commit Message Format
```
<type>: <description>

[optional body]
[optional footer]
```

## Types
- `feat`: New feature or enhancement
- `fix`: Bug fix
- `docs`: Documentation changes
- `style`: Code formatting (no code change)
- `refactor`: Code refactoring
- `test`: Adding or updating tests
- `chore`: Maintenance tasks

## Description Guidelines
- Use imperative mood ("Add" not "Added")
- Keep it concise (< 50 characters)
- No period at the end
- Start with lowercase

## Examples
```
feat: add mentor information to team section
fix: correct X account link display
style: update button hover states
refactor: simplify translation logic
```

## Branch Management
- Main branch: `main`
- Feature branches: `feature/<name>`
- Fix branches: `fix/<name>`

## Remote Repository
```bash
# First time setup
git init
git branch -M main
git remote add origin git@github.com:Ceeon/video-to-text.git

# Daily workflow
git add .
git commit -m "type: description"
git push origin main

# If remote exists error
git remote remove origin
git remote add origin git@github.com:Ceeon/video-to-text.git
```

## SSH Key Setup
```bash
# Generate SSH key
ssh-keygen -t ed25519 -C "your_email@example.com"

# Start ssh-agent
eval "$(ssh-agent -s)"

# Add SSH key
ssh-add ~/.ssh/id_ed25519

# Copy public key
cat ~/.ssh/id_ed25519.pub
# Add to GitHub -> Settings -> SSH keys
```

## Common Issues
1. Permission denied:
```bash
chmod 600 ~/.ssh/id_ed25519
chmod 644 ~/.ssh/id_ed25519.pub
```

2. Test SSH connection:
```bash
ssh -T git@github.com
```

3. Force push (use with caution):
```bash
git push -f origin main
```